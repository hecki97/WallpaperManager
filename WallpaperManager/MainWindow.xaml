<Controls:MetroWindow
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:tk="http://schemas.xceed.com/wpf/xaml/toolkit"
        xmlns:local="clr-namespace:WallpaperManager"
        xmlns:Controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
        xmlns:tb="http://www.hardcodet.net/taskbar"
        xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
        xmlns:fx="clr-namespace:GrayscaleEffect;assembly=GrayscaleEffect"
        xmlns:ViewModels="clr-namespace:WallpaperManager.ViewModels"
        x:Class="WallpaperManager.MainWindow"
        x:Name="mainWindow"
        mc:Ignorable="d"
        
        Title="{Binding MainWindowApplicationHeader}" MinWidth="520" Width="520" MinHeight="350" Height="350"
        GlowBrush="{DynamicResource AccentColorBrush}"
        ShowIconOnTitleBar="True" Loaded="MainWindow_Loaded" Closing="MainWindow_Closing" StateChanged="MainWindow_StateChanged"
        >
    <Controls:MetroWindow.Resources>
        <Style x:Key="TextBlockStyleTextTrimming" TargetType="{x:Type TextBlock}">
            <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
            <Setter Property="local:TextBlockUtils.AutoTooltip" Value="True"/>
        </Style>
        <Style x:Key="ButtonEnabledStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
            <Setter Property="Opacity" Value=".5" />
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="True" >
                    <Setter Property="Opacity" Value="1" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="ImageNotDownloadedYetStyle" TargetType="{x:Type Image}">
            <Style.Triggers>
                <DataTrigger Binding="{Binding IsGrayscaleEffectActive}" Value="True">
                    <Setter Property="Effect">
                        <Setter.Value>
                            <fx:GrayscaleEffect />
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <!-- Bing Button download current wallpaper -->
        <Style x:Key="Bing_BtnStyleDownloadCurrentWallpaper" TargetType="{x:Type Rectangle}">
            <Setter Property="Fill">
                <Setter.Value>
                    <SolidColorBrush Color="Black"/>
                </Setter.Value>
            </Setter>
            <Setter Property="Width" Value="15"/>
            <Setter Property="Height" Value="15"/>
            <Setter Property="ToolTip" Value="Download wallpaper in selected resolution."/>
            <Setter Property="OpacityMask">
                <Setter.Value>
                    <VisualBrush Stretch="Fill" Visual="{StaticResource appbar_disk_download}" />
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding WallpaperFoundOnDisk}" Value="True">
                    <Setter Property="Width" Value="12"/>
                    <Setter Property="Height" Value="14"/>
                    <Setter Property="ToolTip" Value="Open wallpaper with default application"/>
                    <Setter Property="OpacityMask">
                        <Setter.Value>
                            <VisualBrush Stretch="Fill" Visual="{StaticResource appbar_page_image}" />
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <local:ByteConverter x:Key="byteConverter"/>
        <local:TimeConverter x:Key="timeConverter"/>
    </Controls:MetroWindow.Resources>
    <Controls:MetroWindow.RightWindowCommands>
        <Controls:WindowCommands>
            <Button x:Name="switchTheme" Content="Dark Theme" Click="switchTheme_Click"/>
            <Button Content="About"/>
        </Controls:WindowCommands>
    </Controls:MetroWindow.RightWindowCommands>
    <Grid>
        <!-- TrayIcon -->
        <tb:TaskbarIcon IconSource="app.ico" MenuActivation="LeftOrRightClick" ToolTipText="{Binding MainWindowApplicationHeader}" TrayMiddleMouseDown="TrayIcon_ButtonExitClick" TrayMouseDoubleClick="TrayIcon_ButtonRestoreClick">
            <tb:TaskbarIcon.ContextMenu>
                <ContextMenu x:Name="trayIcon_ContextMenu">
                    <!--
                    <MenuItem StaysOpenOnClick="True" Click="cm_nextWallpaper_button_Click">
                        <MenuItem.Header>
                            <StackPanel Orientation="Horizontal">
                                <TextBlock Text="Next Wallpaper:" VerticalAlignment="Center" Margin="0,0,15,0"/>
                                <Button Width="50" Height="50">
                                    <Image Name="trayIcon_NextWPImage" Source="app_32x32.ico"/>
                                </Button>
                            </StackPanel>
                        </MenuItem.Header>
                    </MenuItem>
                    -->
                    <!--<TextBlock Text="{Binding MainWindowApplicationHeader}"/>-->
                    <!--
                    <TextBlock Name="TrayIcon_TextBlockTimeLeft" HorizontalAlignment="Center" Text="00:00:00" FontSize="26.667"/>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="30"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Button Grid.Row="0" Grid.Column="0" Background="#00DDDDDD">
                            <Rectangle Width="23" Height="20">
                                <Rectangle.Fill>
                                    <VisualBrush Stretch="Fill" Visual="{StaticResource appbar_layout_collapse_left_variant}"/>
                                </Rectangle.Fill>
                            </Rectangle>
                        </Button>
                        <Button Grid.Row="0" Grid.Column="1" Background="#00DDDDDD">
                            <Rectangle Width="20" Height="18">
                                <Rectangle.Fill>
                                    <VisualBrush Stretch="Fill" Visual="{StaticResource appbar_shuffle}"/>
                                </Rectangle.Fill>
                            </Rectangle>
                        </Button>
                        <Button Grid.Row="0" Grid.Column="2" Background="#00DDDDDD">
                            <Rectangle Width="23" Height="20">
                                <Rectangle.Fill>
                                    <VisualBrush Stretch="Fill" Visual="{StaticResource appbar_layout_collapse_right_variant}"/>
                                </Rectangle.Fill>
                            </Rectangle>
                        </Button>
                    </Grid>
                    -->
                    <!--
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Button Grid.Column="0" Content="p"/>
                        <Button Grid.Column="1" Content=" r "/>
                        <Button Grid.Column="2" Content="&gt;"/>
                    </Grid>
                    -->
                    <!--
                    <ComboBox x:Name="IntervalComboBox1" IsSynchronizedWithCurrentItem="True" ToolTip="Wallpaper Interval" ItemsSource="{Binding}" MaxWidth="125" MinWidth="125" SelectionChanged="IntervalComboBox_SelectionChanged">
                        <ComboBox.ItemContainerStyle>
                            <Style TargetType="{x:Type ComboBoxItem}" BasedOn="{StaticResource {x:Type ComboBoxItem}}">
                                <Setter Property="Width" Value="94"/>
                            </Style>
                        </ComboBox.ItemContainerStyle>
                        <ComboBox.ItemTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding Converter={StaticResource timeConverter}}" Style="{StaticResource TextBlockStyleTextTrimming}"/>
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                    </ComboBox>
                    -->
                    <Separator/>
                    <MenuItem Header="Restore (Double Click)" x:Name="TrayIcon_ButtonRestore" Click="TrayIcon_ButtonRestoreClick"/>
                    <MenuItem Header="Exit (Middle Mouse)" Click="TrayIcon_ButtonExitClick"/>
                </ContextMenu>
            </tb:TaskbarIcon.ContextMenu>
        </tb:TaskbarIcon>

        <!-- MainWindow -->
        <TabControl x:Name="tabControl" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
            <!-- TabBing -->
            <TabItem Header="Bing" x:Name="TabBing">
                <!-- Execute when main window is loaded -->
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="Loaded">
                        <i:InvokeCommandAction Command="{Binding BtnLoadBingWallpapersCommand}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <!-- Tab Content -->
                <Grid Background="#00E5E5E5">
                    <Grid Height="25" VerticalAlignment="Top">
                        <Grid.DataContext>
                            <ViewModels:MainWindowViewModel SetActiveInstance="Bing"/>
                        </Grid.DataContext>
                        <Button x:Name="Bing_BtnMainWindowSetWallpaper" Command="{Binding BtnMainWindowSetWallpaperCommand}" CommandParameter="Bing" ToolTip="{Binding BtnMainWindowSetWallpaperToolTip}" Content="{Binding BtnMainWindowSetWallpaperContent}" ToolTipService.ShowOnDisabled="True" Margin="3,0,0,-1" FontSize="13.333" Padding="0" HorizontalAlignment="Left" Width="102"/>
                        <ComboBox x:Name="Bing_CbMainWindowBackgroundType" ToolTip="Background Type" HorizontalAlignment="Left" ItemsSource="{Binding CbMainWindowBackgroundType}" SelectedItem="{Binding CbMainWindowSelectedBackgroundType}" Width="100" Margin="110,0,0,0"/>
                        <tk:ColorPicker x:Name="Bing_CpMainWindowSelectedBackgroundColor" ColorMode="ColorCanvas" SelectedColor="{Binding CpMainWindowSelectedBackgroundColor}" ToolTip="Background Color" ShowAdvancedButton="False" UsingAlphaChannel="False" Margin="215,0,0,-1" HorizontalAlignment="Left" Width="40"/>
                        <ComboBox x:Name="Bing_CbMainWindowWallpaperStyle" ItemsSource="{Binding CbMainWindowWallpaperStyle}" SelectedItem="{Binding CbMainWindowSelectedWallpaperStyle}" ToolTip="Wallpaper Style" HorizontalAlignment="Left" Margin="260,0,0,0" Width="100" />
                        <ComboBox x:Name="Bing_IntervalComboBox" IsSynchronizedWithCurrentItem="True" ToolTip="Wallpaper Interval" ItemsSource="{Binding}" HorizontalAlignment="Left" Margin="365,0,0,0" Width="100" IsEnabled="False">
                            <ComboBox.ItemContainerStyle>
                                <Style TargetType="{x:Type ComboBoxItem}" BasedOn="{StaticResource {x:Type ComboBoxItem}}">
                                    <Setter Property="Width" Value="94"/>
                                </Style>
                            </ComboBox.ItemContainerStyle>
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding Converter={StaticResource timeConverter}}" Style="{StaticResource TextBlockStyleTextTrimming}"/>
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>
                    </Grid>
                    <!--
                    <Grid>
                        <Grid.ContextMenu>
                            <ContextMenu >
                                <MenuItem Header="- Quick Settings -" HorizontalContentAlignment="Center"/>
                                <Separator/>
                                <MenuItem x:Name="Bing_BingImageInfoSwitchMenuItem" Header="Show Bing Image Info" IsCheckable="True" />
                                 <MenuItem x:Name="MainWindow_BoolSynchroniseWallpaperSettings" Header="Synchronise wallpaper settings" IsCheckable="True" IsChecked="False" CommandParameter="{Binding IsChecked, RelativeSource={RelativeSource Self}}"/>
                                <Separator/>
                                <MenuItem x:Name="Bing_CmBoolUpdateWallpaperWhenChangingResolution" Header="Update wallpaper when changing resolution" IsCheckable="True" IsChecked="{Binding CmBoolUpdateWallpaperWhenChangingResolution}" Command="{Binding CmBoolUpdateWallpaperWhenChangingResolution}" CommandParameter="{Binding IsChecked, RelativeSource={RelativeSource Self}}" />
                                <MenuItem x:Name="Bing_CmBoolApplyShaderWhenWallpaperHasNotBeenDownloadedYet" Header="Apply shader when wallpaper is not donwloaded yet" IsCheckable="True" IsChecked="{Binding CmBoolApplyShaderWhenWallpaperHasNotBeenDownloadedYet}" Command="{Binding CmBoolApplyShaderWhenWallpaperHasNotBeenDownloadedYet}" CommandParameter="{Binding IsChecked, RelativeSource={RelativeSource Self}}" />
                                <MenuItem x:Name="Bing_CmBoolCircleWallpapersInView" Header="Circle wallpapers in view" IsCheckable="True" IsChecked="{Binding CmBoolCircleWallpapersInView}" Command="{Binding CmBoolCircleWallpapersInView}" CommandParameter="{Binding IsChecked, RelativeSource={RelativeSource Self}}" />
                                <Separator/>
                                <MenuItem x:Name="Bing_CmBoolOpenWallpaperAfterDownload" Header="Open wallpaper after download" IsCheckable="True" IsChecked="{Binding CmBoolOpenWallpaperAfterDownload}" Command="{Binding CmBoolOpenWallpaperAfterDownload}" CommandParameter="{Binding IsChecked, RelativeSource={RelativeSource Self}}" />
                            </ContextMenu>
                        </Grid.ContextMenu> -->
                    <Image x:Name="Bing_ImgCurrentBingWallpaper" Source="{Binding ImgBingWallpaper}" IsEnabled="True" Style="{StaticResource ImageNotDownloadedYetStyle}" Margin="0,32,0,35" Stretch="Uniform">
                        <Image.ContextMenu>
                            <ContextMenu >
                                <MenuItem Header="-- Quick Settings --" HorizontalContentAlignment="Center"/>
                                <Separator/>
                                <!-- <MenuItem x:Name="Bing_BingImageInfoSwitchMenuItem" Header="Show Bing Image Info" IsCheckable="True" /> -->
                                <MenuItem x:Name="MainWindow_BoolSynchroniseWallpaperSettings" Header="Synchronise wallpaper settings" IsCheckable="True" IsChecked="False" CommandParameter="{Binding IsChecked, RelativeSource={RelativeSource Self}}"/>
                                <Separator/>
                                <MenuItem x:Name="Bing_CmBoolUpdateWallpaperWhenChangingResolution" Header="Update wallpaper when changing resolution" IsCheckable="True" IsChecked="{Binding CmBoolUpdateWallpaperWhenChangingResolution}" Command="{Binding CmBoolUpdateWallpaperWhenChangingResolution}" CommandParameter="{Binding IsChecked, RelativeSource={RelativeSource Self}}" />
                                <MenuItem x:Name="Bing_CmBoolApplyShaderWhenWallpaperHasNotBeenDownloadedYet" Header="Apply shader when wallpaper is not donwloaded yet" IsCheckable="True" IsChecked="{Binding CmBoolApplyShaderWhenWallpaperHasNotBeenDownloadedYet}" Command="{Binding CmBoolApplyShaderWhenWallpaperHasNotBeenDownloadedYet}" CommandParameter="{Binding IsChecked, RelativeSource={RelativeSource Self}}" />
                                <MenuItem x:Name="Bing_CmBoolCircleWallpapersInView" Header="Circle wallpapers in view" IsCheckable="True" IsChecked="{Binding CmBoolCircleWallpapersInView}" Command="{Binding CmBoolCircleWallpapersInView}" CommandParameter="{Binding IsChecked, RelativeSource={RelativeSource Self}}" />
                                <Separator/>
                                <MenuItem x:Name="Bing_CmBoolOpenWallpaperAfterDownload" Header="Open wallpaper after download" IsCheckable="True" IsChecked="{Binding CmBoolOpenWallpaperAfterDownload}" Command="{Binding CmBoolOpenWallpaperAfterDownload}" CommandParameter="{Binding IsChecked, RelativeSource={RelativeSource Self}}" />
                            </ContextMenu>
                        </Image.ContextMenu>
                    </Image>
                    <!-- <Button x:Name="Bing_BtnOpenCurrentBingWallpaper" ToolTip="Open upcoming image with associated application" Background="Transparent" Command="{Binding BtnOpenCurrentBingWallpaperCommand}" Margin="55,29,55,31"/> -->
                    <!-- </Grid> -->
                    <Button x:Name="Bing_BtnDisplayNextBingWallpaperLeft" HorizontalAlignment="Left" VerticalAlignment="Bottom" Command="{Binding BtnDisplayNextBingWallpaperLeftCommand}" Style="{StaticResource ButtonEnabledStyle}" Width="27" Height="26" Margin="3,0,0,2">
                        <Rectangle Width="7.5" Height="10">
                            <Rectangle.Fill>
                                <VisualBrush Stretch="Fill" Visual="{StaticResource appbar_chevron_left}"/>
                            </Rectangle.Fill>
                        </Rectangle>
                    </Button>
                    <ComboBox x:Name="Bing_CbBingWallpaperDownloadResolutions" ToolTip="Select image resolution" ItemsSource="{Binding CbBingWallpaperDownloadResolutions}" SelectedItem="{Binding CbSelectedBingWallpaperDonwloadResolution}" Margin="36,0,0,2" VerticalAlignment="Bottom" SelectedIndex="3" HorizontalAlignment="Left" Width="100"/>
                    <Button x:Name="Bing_BtnDownloadCurrentBingWallpaperCommand" Command="{Binding BtnDownloadCurrentBingWallpaperCommand}" Margin="141,0,0,2" Padding="0" FontSize="13.333" HorizontalAlignment="Left" Width="30" Height="26" VerticalAlignment="Bottom">
                        <Rectangle  Style="{StaticResource Bing_BtnStyleDownloadCurrentWallpaper}"/>
                    </Button>
                    <Button Margin="176,0,0,2" Padding="0" FontSize="13.333" Command="{Binding BtnOpenBingWallpaperDirCommand}" HorizontalAlignment="Left" Width="30" Height="26" VerticalAlignment="Bottom">
                        <Rectangle Width="17" Height="13.5">
                            <Rectangle.Fill>
                                <VisualBrush Stretch="Fill" Visual="{StaticResource appbar_folder_open}"/>
                            </Rectangle.Fill>
                        </Rectangle>
                    </Button>
                    <Label x:Name="Bing_StrCurrentBingWallpaperDate" Content="{Binding StrCurrentBingWallpaperDate}" Margin="211,0,145,0" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" FontSize="16" Height="32" VerticalAlignment="Bottom"/>
                    <Button x:Name="Bing_BtnOpenCurrentBingWallpaperCopyrightLink" Command="{Binding BtnOpenCurrentBingWallpaperCopyrightLinkCommand}" ToolTip="{Binding BtnOpenBingWallpaperCopyrightLinkToolTip}" Margin="0,0,110,2" Padding="0" FontSize="13.333" Height="26" VerticalAlignment="Bottom" HorizontalAlignment="Right" Width="30">
                        <Rectangle Width="15" Height="15">
                            <Rectangle.Fill>
                                <VisualBrush Stretch="Fill" Visual="{StaticResource appbar_magnify}"/>
                            </Rectangle.Fill>
                        </Rectangle>
                    </Button>
                    <Button x:Name="Bing_BtnLoadBingWallpapers" Content="Fetch XML" Command="{Binding BtnLoadBingWallpapersCommand}" Margin="0,0,35,2" Padding="0" FontSize="13.333" HorizontalAlignment="Right" Width="70" Height="26" VerticalAlignment="Bottom"/>
                    <Button x:Name="Bing_BtnDisplayNextBingWallpaperRight" HorizontalAlignment="Right" VerticalAlignment="Bottom" Command="{Binding BtnDisplayNextBingWallpaperRightCommand}" Style="{StaticResource ButtonEnabledStyle}" Width="27" Height="26" Margin="0,0,3,2">
                        <Rectangle Width="7.5" Height="10">
                            <Rectangle.Fill>
                                <VisualBrush Stretch="Fill" Visual="{StaticResource appbar_chevron_right}"/>
                            </Rectangle.Fill>
                        </Rectangle>
                    </Button>
                    <!--<Label x:Name="label1" Background="#8CFFFFFF" Content="Wallpaper not downloaded yet!" IsEnabled="{Binding WallpaperFoundOnDisk}" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" Margin="75,116,74,116" FontSize="24"/>-->
                    <!--
                    <ComboBox x:Name="Filter" HorizontalAlignment="Left" Margin="53,246,0,0" VerticalAlignment="Top" Width="100" SelectedIndex="0" ToolTip="Background" SelectionChanged="BackgroundComboBox_SelectionChanged">
                        <ComboBoxItem HorizontalAlignment="Left" Width="94">All</ComboBoxItem>
                        <ComboBoxItem HorizontalAlignment="Left" Width="94">Weekday</ComboBoxItem>
                        <ComboBoxItem HorizontalAlignment="Left" Width="94">Day</ComboBoxItem>
                        <ComboBoxItem HorizontalAlignment="Left" Width="94">Month</ComboBoxItem>
                        <ComboBoxItem HorizontalAlignment="Left" Width="94">Year</ComboBoxItem>
                    </ComboBox>
                    -->
                </Grid>
            </TabItem>

            <!-- TabCustom-->
            <TabItem Header="Custom" IsEnabled="False" x:Name="TabCustom">
                <Grid Background="Transparent" MouseLeftButtonUp="OnMouseLeftButtonUp" MouseMove="OnMouseMove">
                    <!-- SideBar -->
                    <Button x:Name="ButtonOpenDir" Margin="0,31,3,0" VerticalAlignment="Top" HorizontalAlignment="Right" Height="30" Width="40" Click="ButtonOpenDir_Click" ToolTip="Open Directory">
                        <Rectangle Width="20" Height="15">
                            <Rectangle.Fill>
                                <VisualBrush Stretch="Fill" Visual="{StaticResource appbar_folder_open}" />
                            </Rectangle.Fill>
                        </Rectangle>
                    </Button>
                    <Button x:Name="ButtonAddFile" Margin="0,66,3,0" VerticalAlignment="Top" HorizontalAlignment="Right" Height="30" Width="40" Click="ButtonAddFile_Click" ToolTip="Add File(s)">
                        <Rectangle Width="15" Height="18">
                            <Rectangle.Fill>
                                <VisualBrush Stretch="Fill" Visual="{StaticResource appbar_page_add}" />
                            </Rectangle.Fill>
                        </Rectangle>
                    </Button>
                    <Button x:Name="ButtonShuffleList" Margin="0,101,3,0" HorizontalAlignment="Right" Width="40" Height="29" VerticalAlignment="Top" Click="ButtonShuffleList_Click" ToolTip="Shuffle List">
                        <Rectangle Width="18" Height="18">
                            <Rectangle.Fill>
                                <VisualBrush Stretch="Fill" Visual="{StaticResource appbar_shuffle}"/>
                            </Rectangle.Fill>
                        </Rectangle>
                    </Button>
                    <Button x:Name="ButtonClearList" Margin="0,0,3,2" HorizontalAlignment="Right" Width="40" Height="29" VerticalAlignment="Bottom" Click="ButtonClearList_Click" ToolTip="Clear List">
                        <Rectangle Width="15" Height="18">
                            <Rectangle.Fill>
                                <VisualBrush Stretch="Fill" Visual="{StaticResource appbar_delete}"/>
                            </Rectangle.Fill>
                        </Rectangle>
                    </Button>
                    <!-- TopBar -->
                    <Grid Height="25" VerticalAlignment="Top">
                        <Grid.DataContext>
                            <ViewModels:MainWindowViewModel SetActiveInstance="Custom"/>
                        </Grid.DataContext>
                        <Button x:Name="Custom_BtnMainWindowSetWallpaper" Command="{Binding BtnMainWindowSetWallpaperCommand}" CommandParameter="Weather" ToolTip="{Binding BtnMainWindowSetWallpaperToolTip}" Content="{Binding BtnMainWindowSetWallpaperContent}" ToolTipService.ShowOnDisabled="True" Margin="3,0,0,-1" FontSize="13.333" Padding="0" HorizontalAlignment="Left" Width="102"/>
                        <ComboBox x:Name="Custom_CbMainWindowBackgroundType" ToolTip="Background Type" HorizontalAlignment="Left" ItemsSource="{Binding CbMainWindowBackgroundType}" SelectedItem="{Binding CbMainWindowSelectedBackgroundType}" Width="100" Margin="110,0,0,0"/>
                        <tk:ColorPicker x:Name="Custom_CpMainWindowSelectedBackgroundColor" ColorMode="ColorCanvas" SelectedColor="{Binding CpMainWindowSelectedBackgroundColor}" ToolTip="Background Color" ShowAdvancedButton="False" UsingAlphaChannel="False" Margin="215,0,0,-1" HorizontalAlignment="Left" Width="40"/>
                        <ComboBox x:Name="Custom_CbMainWindowWallpaperStyle" ItemsSource="{Binding CbMainWindowWallpaperStyle}" SelectedItem="{Binding CbMainWindowSelectedWallpaperStyle}" ToolTip="Wallpaper Style" HorizontalAlignment="Left" Margin="260,0,0,0" Width="100" />
                        <ComboBox x:Name="Custom_IntervalComboBox" IsSynchronizedWithCurrentItem="True" ToolTip="Wallpaper Interval" ItemsSource="{Binding}" HorizontalAlignment="Left" Margin="365,0,0,0" Width="100" IsEnabled="False">
                            <ComboBox.ItemContainerStyle>
                                <Style TargetType="{x:Type ComboBoxItem}" BasedOn="{StaticResource {x:Type ComboBoxItem}}">
                                    <Setter Property="Width" Value="94"/>
                                </Style>
                            </ComboBox.ItemContainerStyle>
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding Converter={StaticResource timeConverter}}" Style="{StaticResource TextBlockStyleTextTrimming}"/>
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>
                    </Grid>
                    <!--
                    <Button x:Name="ButtonChangeWP" Content="Change" Margin="3,0,0,0" VerticalAlignment="Top" Padding="0" Height="26" FontSize="13.333" Click="ButtonChangeWP_Click" HorizontalAlignment="Left" Width="102"/>
                    <ComboBox x:Name="BackgroundComboBox" HorizontalAlignment="Left" Margin="110,0,0,0" VerticalAlignment="Top" Width="100" ToolTip="Background" SelectionChanged="BackgroundComboBox_SelectionChanged">
                        <ComboBoxItem HorizontalAlignment="Left" Width="94" Content="Solid Color"/>
                        <ComboBoxItem HorizontalAlignment="Left" Width="94" Content="Picture"/>
                        <ComboBoxItem HorizontalAlignment="Left" Width="94" Content="Slideshow"/>
                    </ComboBox>
                    <tk:ColorPicker x:Name="ColorPicker" ColorMode="ColorCanvas" SelectedColor="Black" ToolTip="Background Color" ShowAdvancedButton="False" UsingAlphaChannel="False" Height="26" VerticalAlignment="Top" Margin="215,0,0,0" HorizontalAlignment="Left" Width="40"/>
                    <ComboBox x:Name="WPStyleComboBox" SelectedIndex="0" SelectedValuePath="Content" ToolTip="Wallpaper Style" HorizontalAlignment="Left" Margin="260,0,0,0" VerticalAlignment="Top" Width="100" SelectionChanged="WPStyleComboBox_SelectionChanged">
                        <ComboBoxItem ToolTipService.ShowOnDisabled="true" HorizontalAlignment="Left" Width="94" Content="Fill"/>
                        <ComboBoxItem ToolTipService.ShowOnDisabled="true" HorizontalAlignment="Left" Width="94" Content="Fit"/>
                        <ComboBoxItem HorizontalAlignment="Left" Width="94" Content="Stretch"/>
                        <ComboBoxItem HorizontalAlignment="Left" Width="94" Content="Tile"/>
                        <ComboBoxItem HorizontalAlignment="Left" Width="94" Content="Centre"/>
                        <ComboBoxItem ToolTipService.ShowOnDisabled="true" HorizontalAlignment="Left" Width="94" Content="Span"/>
                    </ComboBox>
                    <ComboBox x:Name="IntervalComboBox" IsSynchronizedWithCurrentItem="True" ToolTip="Wallpaper Interval" ItemsSource="{Binding}" HorizontalAlignment="Left" Margin="365,0,0,0" VerticalAlignment="Top" Width="100" SelectionChanged="IntervalComboBox_SelectionChanged">
                        <ComboBox.ItemContainerStyle>
                            <Style TargetType="{x:Type ComboBoxItem}" BasedOn="{StaticResource {x:Type ComboBoxItem}}">
                                <Setter Property="Width" Value="94"/>
                            </Style>
                        </ComboBox.ItemContainerStyle>
                        <ComboBox.ItemTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding Converter={StaticResource timeConverter}}" Style="{StaticResource TextBlockStyleTextTrimming}"/>
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                    </ComboBox>
                    -->
                    <!-- DataGrid -->
                    <DataGrid x:Name="dataGrid" CanUserResizeColumns="False" CanUserResizeRows="False" CanUserAddRows="False" CanUserDeleteRows="False" CanUserReorderColumns="False" AutoGenerateColumns="False" AllowDrop="True" MaxWidth="2560" MaxHeight="1600" MouseDoubleClick="dataGrid_MouseDoubleClick" Drop="dataGrid_Drop" ItemsSource="{Binding DataGridItem, IsAsync=True}" PreviewMouseLeftButtonDown="dataGrid_OnMouseLeftButtonDown" EnableColumnVirtualization="True" EnableRowVirtualization="True" SelectionMode="Single" Margin="3,31,48,14">
                        <DataGrid.ContextMenu>
                            <ContextMenu >
                                <MenuItem Header="Enable Drag and Drop (Experimental)" IsCheckable="True" Click="MenuItemDragNDrop_Click"  />
                            </ContextMenu>
                        </DataGrid.ContextMenu>
                        <DataGrid.Columns>
                            <DataGridTemplateColumn>
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <CheckBox x:Name="checkbox" IsChecked="{Binding IsEnabled, UpdateSourceTrigger=PropertyChanged}" />
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                            <DataGridTemplateColumn Header="Img" CanUserSort="False" Width="SizeToCells" IsReadOnly="True">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <Button Background="Transparent" Tag="{Binding Name}" Height="30" Width="50" ToolTip="Open image with associated application" Click="ImageButton_Click">
                                            <Button.Template>
                                                <ControlTemplate>
                                                    <Border HorizontalAlignment="Center" VerticalAlignment="Center">
                                                        <Image Source="{Binding Path}"/>
                                                    </Border>
                                                </ControlTemplate>
                                            </Button.Template>
                                        </Button>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                            <DataGridTextColumn Header="Name" Width="*" IsReadOnly="True" CanUserSort="True" Binding="{Binding Name}" ElementStyle="{StaticResource TextBlockStyleTextTrimming}"/>
                            <DataGridTextColumn Header="Path" Width="*" IsReadOnly="True" Binding="{Binding Path}" ElementStyle="{StaticResource TextBlockStyleTextTrimming}"/>
                            <DataGridTextColumn Header="Resolution" IsReadOnly="True" Binding="{Binding Resolution}"/>
                            <DataGridTextColumn Header="Size" IsReadOnly="True" Binding="{Binding Size, Converter={StaticResource byteConverter}}"/>
                            <DataGridTextColumn Header="Type" IsReadOnly="True" Binding="{Binding Type}"/>
                            <DataGridTemplateColumn CanUserSort="False" Width="SizeToCells" IsReadOnly="True">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <Button Background="Transparent" Tag="{Binding Name}" ToolTip="Remove Item From List" Click="ButtonRemoveItem_Click">
                                            <Rectangle Width="12" Height="12">
                                                <Rectangle.Fill>
                                                    <VisualBrush Stretch="Fill" Visual="{StaticResource appbar_close}" />
                                                </Rectangle.Fill>
                                            </Rectangle>
                                        </Button>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                        </DataGrid.Columns>
                    </DataGrid>
                    <Label x:Name="label" Height="23" Margin="3,0,48,-5" VerticalAlignment="Bottom" FontSize="9.333"/>
                </Grid>
            </TabItem>

            <!-- Tab Weather -->
            <TabItem Header="Weather" IsEnabled="False" x:Name="TabWeather">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="Loaded">
                        <i:InvokeCommandAction Command="{Binding BtnLoadWeatherCommand}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <Grid Background="#00E5E5E5">
                    <Grid Height="25" VerticalAlignment="Top">
                        <Grid.DataContext>
                            <ViewModels:MainWindowViewModel SetActiveInstance="Weather"/>
                        </Grid.DataContext>
                        <Button x:Name="Weather_BtnMainWindowSetWallpaper" Command="{Binding BtnMainWindowSetWallpaperCommand}" CommandParameter="Weather" ToolTip="{Binding BtnMainWindowSetWallpaperToolTip}" Content="{Binding BtnMainWindowSetWallpaperContent}" ToolTipService.ShowOnDisabled="True" Margin="3,0,0,-1" FontSize="13.333" Padding="0" HorizontalAlignment="Left" Width="102"/>
                        <ComboBox x:Name="Weather_CbMainWindowBackgroundType" ToolTip="Background Type" HorizontalAlignment="Left" ItemsSource="{Binding CbMainWindowBackgroundType}" SelectedItem="{Binding CbMainWindowSelectedBackgroundType}" Width="100" Margin="110,0,0,0"/>
                        <tk:ColorPicker x:Name="Weather_CpMainWindowSelectedBackgroundColor" ColorMode="ColorCanvas" SelectedColor="{Binding CpMainWindowSelectedBackgroundColor}" ToolTip="Background Color" ShowAdvancedButton="False" UsingAlphaChannel="False" Margin="215,0,0,-1" HorizontalAlignment="Left" Width="40"/>
                        <ComboBox x:Name="Weather_CbMainWindowWallpaperStyle" ItemsSource="{Binding CbMainWindowWallpaperStyle}" SelectedItem="{Binding CbMainWindowSelectedWallpaperStyle}" ToolTip="Wallpaper Style" HorizontalAlignment="Left" Margin="260,0,0,0" Width="100" />
                        <ComboBox x:Name="Weather_IntervalComboBox" IsSynchronizedWithCurrentItem="True" ToolTip="Wallpaper Interval" ItemsSource="{Binding}" HorizontalAlignment="Left" Margin="365,0,0,0" Width="100" IsEnabled="False">
                            <ComboBox.ItemContainerStyle>
                                <Style TargetType="{x:Type ComboBoxItem}" BasedOn="{StaticResource {x:Type ComboBoxItem}}">
                                    <Setter Property="Width" Value="94"/>
                                </Style>
                            </ComboBox.ItemContainerStyle>
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding Converter={StaticResource timeConverter}}" Style="{StaticResource TextBlockStyleTextTrimming}"/>
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>
                    </Grid>
                    <Button x:Name="btnOpenUpcomingWallpaper" ToolTip="Open upcoming image with associated application" Background="Transparent" Command="{Binding BtnOpenUpcomingWallpaperCommand}" Margin="300,57,0,142">
                        <Image x:Name="iUpcomingWallpaper" Source="{Binding UpcomingWallpaper}" Stretch="Uniform"/>
                    </Button>
                    <Grid Margin="0,0,0,33" Height="70" VerticalAlignment="Bottom" HorizontalAlignment="Right" Width="206">
                        <Image x:Name="iCurrentWeatherIcon" Source="{Binding CurrentWeatherIcon}" HorizontalAlignment="Left" Stretch="Uniform" Width="100" Margin="-18,0,0,0"/>
                        <TextBlock x:Name="tbCurrentTemperature" HorizontalAlignment="Left" TextAlignment="Center" Margin="75,0,0,0" TextWrapping="Wrap" Text="{Binding CurrentTemperature}" VerticalAlignment="Top" Height="43" Width="131" FontWeight="Bold" FontSize="40"/>
                        <TextBlock x:Name="tbCurrentWeather" HorizontalAlignment="Left" TextAlignment="Center" Margin="75,48,0,0" TextWrapping="Wrap" Text="{Binding CurrentWeather}" VerticalAlignment="Top" Width="131" Height="22" FontSize="14.667"/>
                    </Grid>
                    <DataGrid x:Name="dgWeatherPackages" Drop="Weather_dataGrid_Drop" Margin="3,31,0,2" CanUserResizeColumns="False" CanUserResizeRows="False" CanUserAddRows="False" CanUserDeleteRows="False" CanUserReorderColumns="False" AutoGenerateColumns="False" AllowDrop="True" ItemsSource="{Binding DgWeatherPackagesData, IsAsync=True}" HorizontalAlignment="Left" Width="282">
                        <DataGrid.Columns>
                            <DataGridTemplateColumn>
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <CheckBox x:Name="checkbox" IsChecked="{Binding IsEnabled}" Checked="Weather_OnChecked" Unchecked="Weather_OnChecked"/>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                            <DataGridTextColumn Header="Name" Width="*" IsReadOnly="True" CanUserSort="True" Binding="{Binding Name}" ElementStyle="{StaticResource TextBlockStyleTextTrimming}"/>
                            <DataGridTemplateColumn>
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <Rectangle Visibility="{Binding WarningSignVisibility}" ToolTip="Warning! Package specific settings.xml not found!" Width="15" Height="15">
                                            <Rectangle.Fill>
                                                <VisualBrush Stretch="Fill" Visual="{StaticResource appbar_warning}"/>
                                            </Rectangle.Fill>
                                        </Rectangle>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                            <DataGridTextColumn Header="Count" Width="*" IsReadOnly="True" CanUserSort="True" Binding="{Binding Count}" />
                            <DataGridTemplateColumn CanUserSort="False" Width="SizeToCells" IsReadOnly="True">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <Button Background="Transparent" Tag="{Binding Name}" ToolTip="Remove Item From List" Click="ButtonRemoveItem_Click">
                                            <Rectangle Visibility="Hidden" Width="12" Height="12">
                                                <Rectangle.Fill>
                                                    <VisualBrush Stretch="Fill" Visual="{StaticResource appbar_close}" />
                                                </Rectangle.Fill>
                                            </Rectangle>
                                        </Button>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                        </DataGrid.Columns>
                    </DataGrid>
                    <Label x:Name="lUpcomingWallpaper" Content="Upcoming Wallpaper:" Margin="300,31,0,217"/>
                    <Button x:Name="button" Content="Left" Command="{Binding BtnDisplayNextUpcomingWallpaperCommand}" CommandParameter="left" Margin="0,0,156,108" HorizontalAlignment="Right" Width="50" Height="29" VerticalAlignment="Bottom"/>
                    <Button x:Name="button2" Content="Right" Command="{Binding BtnDisplayNextUpcomingWallpaperCommand}" CommandParameter="right" Margin="0,0,0,108" HorizontalAlignment="Right" Width="50" Height="29" VerticalAlignment="Bottom"/>
                    <Button x:Name="btnShuffleUpcomingWallpapers" Content="Shuffle" Command="{Binding BtnShuffleUpcomingWallpapersCommand}" Margin="0,0,55,108" Click="Weather_Random_Click" HorizontalAlignment="Right" Width="96" Height="29" VerticalAlignment="Bottom"/>
                </Grid>
            </TabItem>
        </TabControl>
        <!-- the popup that is displayed if user moves rows -->
        <Popup x:Name="popup" IsHitTestVisible="False" Placement="RelativePoint" PlacementTarget="{Binding ElementName=mainWindow}" AllowsTransparency="True">
            <Border BorderBrush="DarkGray" BorderThickness=".5" Background="White">
                <StackPanel Orientation="Horizontal" Margin="4,3,8,3">
                    <Rectangle Width="25" Height="15">
                        <Rectangle.Fill>
                            <ImageBrush Stretch="Fill" ImageSource="{Binding DraggedItem.Path, ElementName=mainWindow}"/>
                        </Rectangle.Fill>
                    </Rectangle>
                    <TextBlock VerticalAlignment="Center" Text="{Binding DraggedItem.Name, ElementName=mainWindow}" Margin="8,0,0,0"/>
                </StackPanel>
            </Border>
        </Popup>
    </Grid>
</Controls:MetroWindow>
    
