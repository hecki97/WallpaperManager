//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WallpaperManager.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "15.1.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("#000")]
        public string backgroundColorHex {
            get {
                return ((string)(this["backgroundColorHex"]));
            }
            set {
                this["backgroundColorHex"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0")]
        public int wallpaperStyleIndex {
            get {
                return ((int)(this["wallpaperStyleIndex"]));
            }
            set {
                this["wallpaperStyleIndex"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("3")]
        public int intervalIndex {
            get {
                return ((int)(this["intervalIndex"]));
            }
            set {
                this["intervalIndex"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0")]
        public int backgroundType {
            get {
                return ((int)(this["backgroundType"]));
            }
            set {
                this["backgroundType"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0")]
        public double count {
            get {
                return ((double)(this["count"]));
            }
            set {
                this["count"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Normal")]
        public global::System.Windows.WindowState WindowState {
            get {
                return ((global::System.Windows.WindowState)(this["WindowState"]));
            }
            set {
                this["WindowState"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0,0")]
        public global::System.Windows.Vector WindowPos {
            get {
                return ((global::System.Windows.Vector)(this["WindowPos"]));
            }
            set {
                this["WindowPos"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0,0")]
        public global::System.Windows.Vector WindowSize {
            get {
                return ((global::System.Windows.Vector)(this["WindowSize"]));
            }
            set {
                this["WindowSize"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"<ArrayOfDouble xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
                        xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
                        <double>15</double>
                        <double>30</double>
                        <double>60</double>
                        <double>300</double>
                        <double>900</double>
                        <double>3600</double>
                        <double>86400</double>
                    </ArrayOfDouble>")]
        public global::System.Collections.Generic.List<double> IntervalList {
            get {
                return ((global::System.Collections.Generic.List<double>)(this["IntervalList"]));
            }
            set {
                this["IntervalList"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool UpgradeRequired {
            get {
                return ((bool)(this["UpgradeRequired"]));
            }
            set {
                this["UpgradeRequired"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"<?xml version=""1.0"" encoding=""utf-16""?>
<ArrayOfString xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
  <string>Picture</string>
  <string>Picture</string>
  <string>Picture</string>
  <string>Picture</string>
</ArrayOfString>")]
        public global::System.Collections.Specialized.StringCollection CbMainWindowSelectedBackgroundType {
            get {
                return ((global::System.Collections.Specialized.StringCollection)(this["CbMainWindowSelectedBackgroundType"]));
            }
            set {
                this["CbMainWindowSelectedBackgroundType"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"<?xml version=""1.0"" encoding=""utf-16""?>
<ArrayOfString xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
  <string>Fill</string>
  <string>Fill</string>
  <string>Fill</string>
  <string>Fill</string>
</ArrayOfString>")]
        public global::System.Collections.Specialized.StringCollection CbMainWindowSelectedWallpaperStyle {
            get {
                return ((global::System.Collections.Specialized.StringCollection)(this["CbMainWindowSelectedWallpaperStyle"]));
            }
            set {
                this["CbMainWindowSelectedWallpaperStyle"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"<?xml version=""1.0"" encoding=""utf-16""?>
<ArrayOfString xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
  <string>#000</string>
  <string>#000</string>
  <string>#000</string>
  <string>#000</string>
</ArrayOfString>")]
        public global::System.Collections.Specialized.StringCollection CpMainWindowSelectedBackgroundColor {
            get {
                return ((global::System.Collections.Specialized.StringCollection)(this["CpMainWindowSelectedBackgroundColor"]));
            }
            set {
                this["CpMainWindowSelectedBackgroundColor"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool UseGlobalSettings {
            get {
                return ((bool)(this["UseGlobalSettings"]));
            }
            set {
                this["UseGlobalSettings"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1920x1200")]
        public string CbBingSelectedDownloadResolution {
            get {
                return ((string)(this["CbBingSelectedDownloadResolution"]));
            }
            set {
                this["CbBingSelectedDownloadResolution"] = value;
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1.2 dev")]
        public string ApplicationVersion {
            get {
                return ((string)(this["ApplicationVersion"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Wallpaper Manager [Bing Edition]")]
        public string ApplicationHeader {
            get {
                return ((string)(this["ApplicationHeader"]));
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool CmBoolUpdateWallpaperWhenChangingResolution {
            get {
                return ((bool)(this["CmBoolUpdateWallpaperWhenChangingResolution"]));
            }
            set {
                this["CmBoolUpdateWallpaperWhenChangingResolution"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool CmBoolApplyShaderWhenWallpaperHasNotBeenDownloadedYet {
            get {
                return ((bool)(this["CmBoolApplyShaderWhenWallpaperHasNotBeenDownloadedYet"]));
            }
            set {
                this["CmBoolApplyShaderWhenWallpaperHasNotBeenDownloadedYet"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool CmBoolCircleWallpapersInView {
            get {
                return ((bool)(this["CmBoolCircleWallpapersInView"]));
            }
            set {
                this["CmBoolCircleWallpapersInView"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool CmBoolOpenWallpaperAfterDownload {
            get {
                return ((bool)(this["CmBoolOpenWallpaperAfterDownload"]));
            }
            set {
                this["CmBoolOpenWallpaperAfterDownload"] = value;
            }
        }
    }
}
